/*****************************
一般情况下以#开头的标记，如 QPushButton#btnClose 也可以直接用 #btnClose，效果一样。


九宫格四个参数属性为： qproperty-scaleLeft   qproperty-scaleRight qproperty-scaleTop qproperty-scaleBottom
图为：                         qproperty-background

主窗口的id为 mainWindow


******************************/
/*
#mainWindow{
	background-origin:padding;
	qproperty-background:url(./skin1/background.png);
	qproperty-scaleLeft:82;
	qproperty-scaleRight:30;
	qproperty-scaleTop:145;
	qproperty-scaleBottom:30;	
}
*/

#mainWindow #icon{
	border:none;
	border-image:url(./skin1/Bomb.jpg); /* icon.ico); */
	height:18px;
	width:18px;
	margin:2px;
}

/*  设置 聊天窗口 << 所有 >> 按钮图片 设计好后可修改 */
#ChatWindow QToolButton, #ChatWindow QPushButton{
    border-image: url(./skin1/bt-normal.png);
}
#ChatWindow QToolButton:hover, #ChatWindow QPushButton:hover{
	border-image: url(./skin1/bt-focus.png);
}
#ChatWindow QToolButton:pressed, #ChatWindow QPushButton:pressed{
	border-image: url(./skin1/bt-press.png);
}

/* 设置改变发送模式按钮 */
#ChatWindow #btnSwitchSendMode{
	border-image:url(./skin1/sendToPC-normal.png);
}
#ChatWindow #btnSwitchSendMode:hover{
	border-image:url(./skin1/sendToPC-hover.png);
}
#ChatWindow #btnSwitchSendMode:pressed{
	border-image:url(./skin1/sendToPC-pressed.png);
}
#ChatWindow #btnSwitchSendMode:checked{
	border-image:url(./skin1/sendToMobile-normal.png);
}
#ChatWindow #btnSwitchSendMode:checked:hover{
	border-image:url(./skin1/sendToMobile-hover.png);
}
#ChatWindow #btnSwitchSendMode:checked:pressed{
	border-image:url(./skin1/sendToMobile-pressed.png);
}

/*  设置所有窗口的缺省背景(目前只支持主窗口，登陆窗口及聊天窗口) ，如第一个规则设定了聊天窗口的背景。 */
fxgui--FxWidget{
	background-origin:padding;
	qproperty-background:url(./skin1/panda_mainWin.bmp); /* main.png); */
	qproperty-scaleLeft:82;
	qproperty-scaleRight:30;
	qproperty-scaleTop:145;
	qproperty-scaleBottom:30;
}
/* 
聊天界面背景设置 
若要独立设置主窗口背景可将 ChatWindow换为 mainWindow
登陆窗口为 loginWindow
*/
#ChatWindow{
	qproperty-background:url(./skin1/panda_mainWin.bmp); /* chat.png); */
	/* 以下为9宫缩放的4个参数,类似于css3里的 borderImage，不
过QT并非所有窗体都支持borderImage,且borderImage里要在border上放按钮我还没找
到方法...这个的具体实现我解决了。提供的背景图不需要固定尺寸，只需要
提供上，下两段及相关的切割数字即可
*/
	qproperty-scaleLeft:82;
	qproperty-scaleRight:30;
	qproperty-scaleTop:142;
	qproperty-scaleBottom:30;
	
}


/* 好友列表树相关样式 */

/*  好友列表树关闭时的背景图 */
QTreeView::branch:has-children:closed{
	border-image: none;
    image: url(./skin1/folder-close.png);
}
/* 好友列表树打开时的背景图 */
QTreeView::branch:has-children:open{
 	border-image: none;
 	image: url(./skin1/folder-open.png);
 }


/*  去掉好友列表的虚线 */
QTreeView::branch:!has-children {
    border:none;
}

/* 好友列表中鼠标经过时的背景渐变  */
QTreeView::item:hover {
   background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e7effd, stop: 1 #cbdaf1);
   border: 1px solid #bfcde4;
}
/* 好友列表被选中元素 有焦点时 背景渐变 */
QTreeView::item:selected:active{
   background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #6ea1f1, stop: 1 #567dbc);
}
/* 好友列表被选中元素 无焦点时 背景渐变 */
QTreeView::item:selected:!active {
   background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #6b9be8, stop: 1 #577fbf);
}

/* 输入框背景透明 */
QLineEdit{
	background-color:rgba(240,255,255,0%); 
	border:2px solid darkgray;
}
/* 输入框有鼠标经过时背景色变化 */
QLineEdit:hover{
	background-color:rgba(240,255,255,10%);
}
/* 输入框有焦点时(可接收输入时) 背景色，这里用了QT的pallet，也可以设置确定的颜色，用rgb 或rgba都可以*/
QLineEdit::focus{
	border:2px solid darkgray;
	background-color:pallet(button);
}

/* 心情短语 非编辑状态 鼠标经过时背景，这里原代码还有个BUG，主窗口RESIZE后要点中心情短语的文字才可以进入编辑状态 */
#nickname:hover,#impression:hover{
border:none;
/* border-image:url(./skin1/bt-normal.png) 4 4 4 4; */
background:rgba(222,140,41,20%);
}
/* 心情短语 编辑状态  */
#impression QLineEdit:focus{
	border:solid;
	border:2px solid darkgray;
}

/* 添加好友按钮 */
#btnAddFriend{
	qproperty-icon:url(./skin1/ad.png);
	padding:0;
	margin:0;
	border:none;
	border-image: url(./skin1/bt-normal.png);
}
#btnAddFriend:hover{
	border:none;
	border-image:url(./skin1/bt-focus.png);
}
#btnAddFriend:pressed{
	border:none;
	border-image: url(./skin1/bt-press.png);
}

/* portrait 头像*/
/* 备注：往后版本如果下载用户定义的头像，则此属性的CSS将不提供修改或背景默认指向指定路径 */
#portrait{
	border-image:url(./skin1/user-face.png) 0 0 0 0;/* 这个是头像的边框，注意，边框的显示要求头像周围是透明的 */
	background-repeat:repeat-none;
	background-image:url(./skin1/Bomb.jpg);
	background-position: center center;
	width:66;
	height:66;
}
/* 主窗口标题，这个没多大作用*/
fxgui--FxWidget{
	qproperty-windowTitle:"small fetion---default-style";
}


/*
设置窗口界面标题左边距，这个是为了我改PANDA的皮肤时没把 LibFetion字样去掉才移动窗口标题
为美观也可以分别对margin padding的top left right bottom 进行设置
*/
fxgui--FxWidget QLabel#title{
	border-top:5px;
	border-bottom:5px;
	/*margin-left:80px;*/
}
/* 当前窗口有焦点时，标题的样式 */
fxgui--FxWidget QLabel#title:active{
	color:red;
	font-family:"Nina";
}
/* 当前窗口无焦点时*/
fxgui--FxWidget QLabel#title:!active{
	color:#00ff00;
	font-family:"Arial";
}

/* 所有窗口的最小化按钮的三个状态图片 */

QPushButton#btnMinimize{
    border: none;
    border-image: url(./skin1/panda_minBtn.bmp); /* mini-normal.png); */
	margin-top:2px;
	/* margin-right:4px; */
}
fxgui--FxWidgetTitleBar QPushButton{
	width:20px;
	height:32px; 
	margin:0;
	padding:0;
}
QPushButton#btnMinimize:hover{
	border-image: url(./skin1/panda_minBtn_hover.bmp); /* mini-hover.png); */
	margin-top:2px;
}
QPushButton#btnMinimize:pressed{
	border-image: url(./skin1/panda_minBtn_pressed.bmp); /* mini-pressed.png); */
	margin-top:2px;
}
/* 所有窗口的关闭按钮的三个状态图片 */
QPushButton#btnClose{
    border: none;
    border-image: url(./skin1/panda_closeBtn.bmp); /* close-normal.png); */
	margin-top:2px;
}
QPushButton#btnClose:hover{
	border-image: url(./skin1/panda_closeBtn.bmp); /* close-hover.png); */
	margin-top:2px;
}
QPushButton#btnClose:pressed{
	border-image: url(./skin1/panda_closeBtn.bmp); /* close-pressed.png); */
	margin-top:2px;
}

QToolButton#btnMenu{
	border:none;
	qproperty-shortcut:"CTRL+A"; /* 设置快捷键(需在主窗口为当前窗口时才有效) */
}

/* 主窗口底部“MENU”按钮的三个状态图片 */
QToolButton#btnMenu{
    border-image: url(./skin1/bt-normal.png);
}
QToolButton#btnMenu:hover{
	border-image: url(./skin1/bt-focus.png);
}
QToolButton#btnMenu:pressed{
	border-image: url(./skin1/bt-press.png);
}

/* 主窗口“给自已发短信”按钮的三个状态图片 */
QToolButton#btnSendSelf{
	border:none;
	qproperty-icon:url(./skin1/phone.png);
    /* border-image: url(./skin1/bt-normal.png); */
	/* background-color:rgba(100,255,100,50%); */
}

QToolButton#btnSendSelf:hover{
	/* border-image: url(./skin1/bt-focus.png); */
	background-color:rgba(100,255,100,20%);
}
QToolButton#btnSendSelf:pressed{
	/* border-image: url(./skin1/bt-press.png); */
	background-color:rgba(100,255,100,10%);
}


/* 主窗口底部“设置”按钮的三个状态图片 */
QToolButton#btnSettings{
	border:none;
	qproperty-icon:url(./skin1/setting.png);
    /* border-image: url(./skin1/bt-normal.png); */
}

QToolButton#btnSettings:hover{
	/* border-image: url(./skin1/bt-focus.png); */
	background-color:rgba(100,255,100,20%);
}
QToolButton#btnSettings:pressed{
	/* border-image: url(./skin1/bt-press.png); */
	background-color:rgba(100,255,100,10%);
}



/* 以下可忽略 */
#facesPopup{
	background-image:url(./skin1/input_face.gif);
	background-repeat:none;
}
#btnSkin{
	qproperty-icon:url(./skin1/ap.png) 2 2 2 2;
}
#icon,#ChatWindow #icon{
	border-image:none;
	border:none;
}
#lineSearch{
	background-color:rgba(240,255,255,0%); 
	border:1px solid gray;
}
#lineSearch:hover,#lineSearch:focus{
	background-color:rgba(240,255,255,100%);
}
 QMenu::item{
   background: /* url(./skin1/menu-bg.png); */ qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #a0f5a0, stop:0.1 #a0f5a0, stop: 1 #0ffaff);  
 }

 QMenu::item {
     padding: 2px 25px 2px 20px;
     border: 1px solid transparent; /* reserve space for selection border */
 }

 QMenu::item:selected {
     /* border-color: darkblue; */
     background: rgba(100, 100, 100, 150);
 }

 QMenu::icon:checked { /* appearance of a 'checked' icon */
     background: gray;
     border: 1px inset gray;
     position: absolute;
     top: 1px;
     right: 1px;
     bottom: 1px;
     left: 1px;
 }

 /*QMenu::separator {
     height: 2px;
     background: lightblue;
     margin-left: 10px;
     margin-right: 5px;
 }

 QMenu::indicator {
     width: 13px;
     height: 13px;
 }*/

 /* non-exclusive indicator = check box style indicator (see QActionGroup::setExclusive) *//*
 QMenu::indicator:non-exclusive:unchecked {
     image: url(:/images/checkbox_unchecked.png);
 }

 QMenu::indicator:non-exclusive:unchecked:selected {
     image: url(:/images/checkbox_unchecked_hover.png);
 }

 QMenu::indicator:non-exclusive:checked {
     image: url(:/images/checkbox_checked.png);
 }

 QMenu::indicator:non-exclusive:checked:selected {
     image: url(:/images/checkbox_checked_hover.png);
 }

 *//* exclusive indicator = radio button style indicator (see QActionGroup::setExclusive) *//*
 QMenu::indicator:exclusive:unchecked {
     image: url(:/images/radiobutton_unchecked.png);
 }

 QMenu::indicator:exclusive:unchecked:selected {
     image: url(:/images/radiobutton_unchecked_hover.png);
 }

 QMenu::indicator:exclusive:checked {
     image: url(:/images/radiobutton_checked.png);
 }

 QMenu::indicator:exclusive:checked:selected {
     image: url(:/images/radiobutton_checked_hover.png);
 }
 */
